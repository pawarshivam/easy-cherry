"""
Do not edit this file without my permission
"""
import configparser
import os
import shutil
import git
import tabulate
import art
import pyperclip
import csv
import datetime
import copy

config = configparser.ConfigParser()
config.read('config.cfg')

branch = ''

def copy_results_ids_to_the_clipboard(results):
    pyperclip.copy('\n'.join([result['commit_id'] for result in results]))
    print('| >  Copied commit ids to the clipboard')


def write_the_table_to_a_csv_file(stories, results):
    fieldnames = ['story', 'commit_id', 'author', 'date', 'message']

    with open('%s.csv' % stories, 'w', encoding='UTF8', newline='') as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(results)

    print('| > Wrote results to %s' % (stories))


def init_repo() -> git.Repo:
    """
    """
    global branch
    branch = str(input('Branch: '))
    
    try:
        if os.path.exists(config.get('Settings', 'clone')):
            shutil.rmtree(config.get('Settings', 'clone'))
        os.makedirs(config.get('Settings', 'clone'))

        print('> Cloning repo %s' % config.get('Settings', 'repo'))
        repo = git.Repo.clone_from(
            config.get('Settings', 'repo'),
            config.get('Settings', 'clone'),
            branch=branch,
        )

        return repo
    except Exception as e:
        print('! Could not clone the respository %s' % (config.get('Settings', 'repo')))


def to_short(results):
    x_results = copy.copy(results)

    for result in x_results:
        result['author'] = result['author'][:20]
        result['message'] = result['message'][:50]

    return x_results


def query(repo: git.Repo) -> None:
    """
    """
    try:
        stories = list(set([story.strip().lower()
                       for story in input('Stories > ').split(',')]))

        results = []
        for commit in list(repo.iter_commits(branch, max_count=config.get('Settings', 'commits'))):
            for story in stories:
                if story in commit.message.lower():
                    results.append({
                        'story': story,
                        'commit_id': commit.hexsha,
                        'author': commit.author.name,
                        'date': datetime.datetime.utcfromtimestamp(int(commit.committed_date)).strftime('%m-%d-%Y'),
                        'message': commit.message,
                    })

        print(tabulate.tabulate(to_short(results),
              headers='keys', tablefmt='psql'))

        print('1 > Copy commit ids to clipboard')
        print('2 > Save the table to a csv file')
        print('3 > Both :-)')
        print('0 > 5* Do nothing')
        action = input('? > ')

        if action == '1':
            copy_results_ids_to_the_clipboard(results)
        if action == '2':
            write_the_table_to_a_csv_file('_'.join(stories), results)
        if action == '3':
            copy_results_ids_to_the_clipboard(results)
            write_the_table_to_a_csv_file('_'.join(stories), results)

        print('=' * 100)
    except Exception as e:
        print(e)
        print('! 500 :-/')
        print('! Check if you have entered the branch name correctly')


if __name__ == '__main__':
    art.tprint('Easy Cherry', font='rnd-large')

    print('~ Developed by Shivam Pawar')
    print('=' * 100)

    repo = init_repo()

    while True:
        query(repo)
